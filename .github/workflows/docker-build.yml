name: Docker Image CI

on:
  push:
    branches: ["main"]
    tags:
      - "v*"
  pull_request:
    branches: ["main"]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: true

    permissions:
      id-token: write
      packages: write
      contents: read
      attestations: write

    steps:
      - name: checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/${{ github.repository_owner }}/list-sync
          tags: |
            type=semver,pattern={{major}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{version}}

            type=edge,branch=main
            type=ref,event=branch
            type=ref,event=pr

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        if: github.event_name != 'pull_request'
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build container
        id: push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          # platforms: linux/amd64,linux/arm64,linux/arm/v7,linux/arm/v6,linux/s390x
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          provenance: mode=max
          sbom: true

      - name: Test Docker image (if built for local arch)
        if: github.event_name == 'pull_request'
        run: |
          # Build a local test image
          docker build -t list-sync-test .
          # Test basic functionality - this will validate our new structure works
          docker run --rm \
            -e OVERSEERR_URL="http://test.example.com" \
            -e OVERSEERR_API_KEY="test-key" \
            -e AUTOMATED_MODE="false" \
            -e SYNC_INTERVAL="0" \
            list-sync-test timeout 10 python -c "import list_sync; print('Package imports successfully')" || true
